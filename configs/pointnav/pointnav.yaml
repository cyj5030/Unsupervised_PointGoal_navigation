VERBOSE: False

BASE_TASK_CONFIG_PATH: "configs/pointnav/pointnav_gibson.yaml"

# training settings
TRAINER_NAME: "ppo"
ENV_NAME: "NavRLEnv"
SENSORS: ["RGB_SENSOR", "DEPTH_SENSOR"]
NUM_UPDATES: 5000000
NUM_ENVIRONMENTS: 6
SIMULATOR_GPU_ID: 2
TORCH_GPU_ID: 2

# logging settings
REUSE_CKPT: True
LOG_FILE_NAME: pointnav
LOG_FILE: "train_log/{log_file_name}/train.log"
CHECKPOINT_FOLDER: "train_log/{log_file_name}/checkpoints"
TENSORBOARD_DIR: "train_log/{log_file_name}/tb"
NUM_CHECKPOINTS: -1
CHECKPOINT_INTERVAL: 50
LOG_INTERVAL: 10
TEST_EPISODE_COUNT: -1

# evaluation settings
VIDEO_OPTION: []   # choices: ["none", "disk", "tensorboard"], "none" is used for storing image info but not generating video
VIDEO_DIR: "train_log/{log_file_name}/videos"
EVAL_CKPT_PATH_DIR: "train_log/{log_file_name}/checkpoints/ckpt.339.pth" # 339 2144
EVAL:
  SPLIT: val
  TEST_EPISODE_COUNT: -1
  RANK_TOP_K: 1
  DRAW_SHORTEST_PATH: True
  EVAL_WITH_CKPT: True

# for eval
use_pre_trained: True # for train
pretrain_path: "train_log/pointnav_baseline/checkpoints/ckpt.2144.pth"
turn_policy: True
VO:
  method: ours # ours deepVO supVO
  USE_VO_MODEL: True
  vo_config_path: ./train_log/vo/config.yaml
  vo_reuse_id: 280000
GC:
  USE_GC_EVAL: True
  hidden_size: 256
  out_size: 32
  hd_loss: True
  pc_loss: True
  coeff_hd: 0.05
  coeff_pc: 0.05


RL:
  SUCCESS_REWARD: 2.5

  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 4
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 2.5e-4
    eps: 1.e-5
    max_grad_norm: 0.5
    num_steps: 128
    hidden_size: 512
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: True
    use_linear_lr_decay: True
    reward_window_size: 50

    # Use double buffered sampling, typically helps
    # when environment time is similar or large than
    # policy inference time during rollout generation
    use_double_buffered_sampler: False
    
  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True
    # Whether or not to reset the critic linear layer
    reset_critic: True
